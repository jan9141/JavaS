
https://caniuse.com/   --->>  최신 트렌드 -> 프론트 아주 유용한 사이트 , javascript, html, css
https://developer.mozilla.org/ -> 프론트, javascript, html, css 가장 많이 참조
https://www.w3schools.com/ -> 프론트, 참조 하기 쉬운 사이트



form -> 사용자의 정보를 입력 받아서 서버에 전송 해주는 요소

서버 전송 시 -> name:value	->	?userId=m111&userPw=1111

1. block
2. 회원가입,로그인 페이지의 사용자 입력정보를 처리

<form action="전송될 서버주소" method="전송방법" name="form의 name" id="아이디">
	<!--사용자가 입력-->

</form>

1. form 속성

action -> form 의 사용자 정보를 서버에 전송 할 주소
method -> 서버에 전송할 방법(POST -> 주로) , 설정 하지 않을 시 GET
id -> form의 고유 아이디
name -> form의 name -> HTML5에서는 사용 하지 않기를 권한다.
enctype -> 저장 , 전송될 파일 유형

2. input type -> 사용자 정보 입력 방식 <input type="type종류" name"서버전송"	id"고유"	class	size	max-lenght	placeholder> 

input 속성
type -> input 타입 -> 필수
name -> 서버에 전송할 key(이름) -> 필수
id - 아이디
class - 클래스
size - 길이 -> input의 width 제한
max-lenght -> 입력 글자수 제한
placeholder -> 기본 표시될 텍스트 -> 실제 입력시 사라진다. 

input[type=text] -> 아이디나 텍스트를 입력
input[type=password] -> 비밀번호 입력 (****)
input[type=radio] -> 하나만 선택 ** 반드시 name 같아야 된다. (남여 필수) -> checked (자동선택)
input[type=checkbox] -> 다중 선택 ** 반드시 name 같아야 된다. (취미,전공신청) -> checked (자동선택)
input[type=select] -> 하나만 선택(콤보상자) ** ->selected(자동선택)
input[type=reset] -> form입력 요소 초기화
input[type=button] -> 이벤트(클릭등)를 통해서 함수를 호출(call) 하기 위한 타입
textarea -> 다중 텍스트 글입력 -> 메모, 자기소개
input[type=submit] -> 클릭(button)을 하면 form의 정보를 action의 서버주소를 전송 하는 역할
	-> event.preventDefaault(); // 기본 이벤트 중지, form의 유효성 검사

===============================


1.자바스크립트.
  ECMAScript,
  ES6 ECMAScript2015
2. 프로그래밍언어 -> 프로그램을 만드는 언어 -> 웹애플리케이션
3. 컴파일언어 -> 번역(출판),c, java
4. 스크립트언어 -> 해석(한줄씩)
5. 인터프리터 -> 브라우저에 내장 되어 있는 자바스크립트 해석 (엔진)
6. 변수란?
	var	es6 이전
	let	es6
	const	es6
7. 자바스크립트 자료형(data type)의 종류

String st="문자열" ; //

** ECMAScript 주요버전별 특징
1. ES3 (1999) -> 현재의 자바스크립트

2. ES5 (2009)
배열의 forEach, map, filter, reduce, some, every 메소드 추가
Object에 대한 getter , setter 메서드 추가
자바스크립트 srict 모드 지원 (이전 버전보다 엄격한 문법 검사를 한다.) "use strict";
JSON 지원 - Ajax XML 대체

3. ECMAScript2015 (ES6) **** 현재 자바스크립트 표준 버전
let, const 키워드 추가 -> 이전에는 var 사용
block scope 를 가진 let 과 const (상수) 키워드를 추가
arrow 문법 지원 -> 함수처리의 효율성 (자바의 람다와 유사)
arrow 문법은 코드가 간호화, this 를 바인딩하지 않는다.


=====================================================

id -> 하나의 id 요소
document.querySelector('#아이디명')
class -> 하나 이상의 리스트(순서가 있다. 0번지부터 시작~)
document.querySelector('클래스명') // 하나
document.querySelectorAll('.클래스명')//첫번째클래스
document.querySelectorAll('.클래스명')[0]//첫번째클래스
document.querySelectorAll('.클래스명')[1]//두번째클래스

1) var -> ES6 이전에 사용, ES6부터는 제한적으로 사용, 엄격하지 못하다(너무유연)
**** 호이스팅
변수 선언, 초기화
var num1; // 변수 num1를 선언했다. -> 메모리(컴퓨터 저장공간)에 변수 num1를 할당
num1=100;// 변수 num1를 숫자형 데이터 100으로 초기화 했다.
num1=200;// 변수 num1 다른 값을 대입할 수 있다.
-> 변수 num1에 숫자데이터 200을 대입했다.
	= "대입 연산자"
var num2=100;// 변수 num2 선언하고 숫자형 데이터 100으로 초기화 했다.
nar num2="문자";// 중복 선언이 가능

2. let 변수명; // 변수를 선언, let은 한번만 선언 할 수 있다.
let num2; // 변수 num2 선언
	num2=100; num2=200;
let num2; // 같은 기억공간에 동일한 이름으로 선언 할 수 없다.
*** 변경 가능한 데이터를 저장 하는 변수 -> 일반적인 변수
*** ES6부터 변수 선언 방식 채택

3. const 변수명; // 상수 , 한번만 선언, 값을 한번만 초기화
const num3;//
const num3=100; *** 선언과 동시에 반드시 초기화 해야된다.
	num3=300;// X // 같은 기억공간에 동일한 이름으로 선언 할 수 없다.
**변경 불가능한 데이터를 저장 하는 변수 -> document의 객체등

	중복선언		초기화		호이스팅
var	O		O		O	->ES6이전
let	X		O		X	->ES6~ -> 변화 될수 있는 data
const 	X		X		X	->ES6~ -> 변화 될 수 없는 data

click -> 눌렀다 뗐을 때 발생 하는 이벤트
mousedown -> 눌렀을 때 발생 하는 이벤트